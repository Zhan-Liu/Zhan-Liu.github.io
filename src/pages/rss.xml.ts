import rss from "@astrojs/rss";
import { SITE_DESCRIPTION, SITE_LANGUAGE, SITE_TAB, SITE_TITLE } from "@config";
import { getCollection } from "astro:content";
import { marked } from "marked";

export async function GET(context: any) {
  // 获取 "blog" 内容集合
  const allBlogPosts = await getCollection("blog");
  // 过滤草稿并添加 collection 标识
  const blogPosts = import.meta.env.PROD
    ? allBlogPosts.filter((post) => !post.data.draft)
    : allBlogPosts;
  const formattedBlogPosts = blogPosts.map((post) => ({
    ...post,
    collection: "blog", // 标识来源为 blog
  }));

  // 获取 "memory" 内容集合
  const allMemoryEntries = await getCollection("memory");
  // 过滤草稿并添加 collection 标识 (假设 memory 也有 draft 属性)
  // 如果 memory 没有 draft 属性，可以简化为：
  // const memoryEntries = allMemoryEntries;
  const memoryEntries = import.meta.env.PROD
    ? allMemoryEntries.filter((entry) => !entry.data.draft)
    : allMemoryEntries;
  const formattedMemoryEntries = memoryEntries.map((entry) => ({
    ...entry,
    collection: "memory", // 标识来源为 memory
  }));

  // 合并所有内容 (博客文章和记忆条目)
  const allContent = [...formattedBlogPosts, ...formattedMemoryEntries];

  // 统一排序所有内容
  const sortedContent = allContent.sort(
    (a: any, b: any) =>
      new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
  );

  function replacePath(content: string, siteUrl: string): string {
    return content.replace(/(src|img|r|l)="([^"]+)"/g, (match, attr, src) => {
      if (!src.startsWith("http") && !src.startsWith("//") && !src.startsWith("data:")) {
        return `${attr}="${new URL(src, siteUrl).toString()}"`;
      }
      return match;
    });
  }

  const items = await Promise.all(
    sortedContent.map(async (item: any) => { // 注意这里迭代的是 sortedContent，并且变量名改为 item
      const { data: { title, description, pubDate }, body, slug, collection } = item; // 解构出 collection 属性

      const content = body
        ? replacePath(await marked(body), context.site)
        : "No content available.";

      // 根据 item.collection 动态生成 URL
      const postURL = new URL(`/${collection}/${slug}/`, context.site);

      return {
        title,
        description,
        link: postURL.toString(),
        guid: postURL.toString(),
        content: `<blockquote>This rendering was automatically generated by Frosti Feed and may have formatting issues. For the best experience, please visit: <a href="${postURL}">${postURL}</a></blockquote> ${content}`,
        customData: `
          <dc:creator><![CDATA[${SITE_TAB}]]></dc:creator>
          <pubDate>${new Date(pubDate).toUTCString()}</pubDate>
        `,
      };
    })
  );

  return rss({
    title: SITE_TITLE,
    description: SITE_DESCRIPTION,
    site: context.site,
    items,
    customData: `
      <language>${SITE_LANGUAGE}</language>
    `,
    xmlns: {
      dc: "http://purl.org/dc/elements/1.1/",
      content: "http://purl.org/rss/1.0/modules/content/",
      atom: "http://www.w3.org/2005/Atom",
      version: "2.0",
    },
  });
}